No.1768交替合并字符串
第一版解答：暴力解答
class Solution {
    public String mergeAlternately(String word1, String word2) {
        StringBuilder string111 = new StringBuilder();
        if(word1.length() == word2.length()){
            for(int i = 0;i<word1.length();i++){
                string111.append(word1.charAt(i));
                string111.append(word2.charAt(i));
            }
        }else if(word1.length()<word2.length()){
            for(int i = 0;i<word1.length();i++){
                string111.append(word1.charAt(i));
                string111.append(word2.charAt(i));  
            }
            for(int j=word1.length();j<word2.length();j++){
                string111.append(word2.charAt(j));
            }
            return string111.toString();
        }else{
            for(int i = 0;i<word2.length();i++){
                string111.append(word1.charAt(i));
                string111.append(word2.charAt(i));
            }
            for(int j = word2.length();j<word1.length();j++){
                string111.append(word1.charAt(j));
            }
            return string111.toString();
        }
        return string111.toString();
    }
}
思路：构建一个新字符串后，判断两个输入的字符串长度，如果相等，就利用循环遍历添加到新字符串中，使用的是stringBuilder方法。如果长度不相等，则先利用一个循环遍历相等的位数，遍历完成后再截取多余的字符串末尾到新字符串中；
不足：利用最多的时候利用了两个for循环，时间和空间内存占用不是最优解，考虑使用指针进行解答；
更加简洁的解答：
class Solution {
    public String mergeAlternately(String word1, String word2) {
    int w1 = word1.length();
    int w2 = word2.length();
    StringBuilder sr = new StringBuilder();
    for(int i = 0;i<w1||i<w2;i++){
        if(i<w1){
            sr.append(word1.charAt(i));
        }
        if(i<w2){
            sr.append(word2.charAt(i));
        }
    }
    return sr.toString();
    }
}
过程中问题：数组和StringBuilder混淆，append方法是属于String Builder的，不能用在char数组中；
字符串不能直接获取某一位的字符，应该使用charAt(i)方法来获取；
return的值错误返回了一个数组/StringBuilder，应该采用toString()方法来返回字符串；
GPT改错结果：
数组声明错误：你尝试使用new char[w1+w2]来声明一个char数组，但是你之后尝试使用StringBuilder的append方法来给数组添加元素，这是不正确的做法。如果你想要动态添加元素，应该使用StringBuilder而不是数组。
数组访问和StringBuilder方法：你尝试使用括号访问字符串中的字符（例如word1(i)），这是不正确的。正确的方式是使用charAt(i)方法。此外，你尝试对char[]数组使用append方法，这也是不正确的，因为append方法是StringBuilder的方法，不适用于数组。
返回类型不匹配：你想要返回一个字符串，但你的代码尝试返回一个char数组（或者你本意是操作StringBuilder但声明成了数组）。你应该将最终的StringBuilder对象转换为字符串来返回。
语法错误：使用word1.charAt(i)和word2.charAt(i)获取字符而不是word1(i)和word2(i)。

No.389 找不同 
给定两个字符串 s 和 t ，它们只包含小写字母。
字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。
请找出在 t 中被添加的字母。
class Solution {
    public char findTheDifference(String s, String t) {
        //思路1：对s和t中每个出现的字母进行计数，不相同的就是新增的
        //思路2：将s和t按字母顺序排列，然后逐个字符对比，不相同的即是新增的
        //思路3：将两个字符串中的字符Unicode码各种相加，最后两者的差值即是新增的字母
        //思路4：将两个字符串合并，对其中每个字母出现次数相加，结果为奇数的就是新增的字母
       int sums = 0;
       int sumt=0;
        for(int i = 0;i<s.length();i++){
            sums = sums + s.charAt(i);
            sumt = sumt + t.charAt(i);
        }
        sumt = sumt + t.charAt(s.length());
        int addsum = sumt - sums;
        return (char)addsum;
    }
}
总结：较复杂的方法是方法1和方法2，需要利用哈希表；方法3和方法4方法较为巧妙。
ChatGPT改错结果：
1.语法错误：使用char()方法获取字符是不正确的语法。在Java中，应使用charAt()方法来获取字符串中指定位置的字符。
2.逻辑错误：在计算t的字符总和时，你的循环应当遍历整个字符串t，而不是只遍历到s.length()。同时，s.length()+1的计算会越界，应该使用s.length()来索引t中最后一个添加的字符。
注意：
题目中添加一个字母的意思不是说在原来的字符串中没有这个这个字母，而是将原字符串全部打乱后，多加进去一个可能已经存在的字母，所以初版这种碰到原字符串中没有的字母添加会通过，但是一旦是重复字母添加，就会报错。
思路错误代码：
class Solution {
    public char findTheDifference(String s, String t) {
        int j = 0;
        for(int i = 0;i<t.length();i++){//先遍历t,拿出每一个字符来判断是否在s中，不在的话就返回-1；
            if(s.indexOf(t.charAt(i))!= -1){
                continue;
            }else{
                j = i;
                break;
            }
        }
        return t.charAt(j);
    }
}
其余方法1：两个字符串合并后，计算其中字符出现的次数，出现次数为奇数的就是新增的字符，代码如下：
class Solution {
    public char findTheDifference(String s, String t) {
        String mergeString = s + t;
        int counti = 0;
        for (int i = 0;i<mergeString.length();i++){
            int count = 0;
            for(int j = 0;j<mergeString.length();j++){
                if (mergeString.charAt(i)== mergeString.charAt(j)){
                    count++;
                }
            }
            if (count % 2 != 0){
                counti = i;
                break;
            }
        }
        return mergeString.charAt(counti);
    }
}
其余方法2：异或运算。将两个字符串合并，对其中每个字符进行异或运算，剩余到最后的即是新增的字符
class Solution {
    public char findTheDifference(String s, String t) {
        String mergeSAndT = s+t;
        char c = 0;
        for(int i = 0; i <mergeSAndT.length();i++){
            c =(char)(c ^  mergeSAndT.charAt(i));
        }
        return c;
        }
    }
注意第129行中，一个char与另一个char或者int进行操作运算时，结果会被提升为int类型，如果没有整体进行强制类型转换，编译器就会报错，此时就是遇到了类型兼容性问题；
报错信息：incompatible types: possible lossy conversion from int to char
            c = c ^ mergeSAndT.charAt(i);

No.28 找出字符串中第一个匹配项的下标；
习题描述：给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。
初版代码：仅能通过41/88个测试用例
class Solution {
    public int strStr(String haystack, String needle) {
        int signal = -1;
        int count = 0;
        if(needle.length()>haystack.length()){
            return signal;
        }
        if(needle.length() == 1 && haystack.length() == 1){
            if(needle.equals(haystack)){
                return 0;
            }else{
                return signal;
            }
        }
        for(int j = 0;j<haystack.length()-needle.length();j++){
            if(needle.charAt(0) != haystack.charAt(j)){
                continue;
            }else{
                for(int i = 0;i<needle.length();i++){
                    if(needle.charAt(i)!=haystack.charAt(j+i)){
                        break;
                    }else if(needle.charAt(i)==haystack.charAt(j+i)){//此时两个字符串的其中一位字符能对上
                        count++;
                    }
                }
                }
                if(count == needle.length()){
                    signal = j;
                }
            }
            return signal;
            }
    }
存在的问题：
1.循环条件错误：你的外层循环for(int j = 0; j < haystack.length() - needle.length(); j++)应该修改为for(int j = 0; j <= haystack.length() - needle.length(); j++)，这样可以确保包含末尾的情况，因为当needle和haystack的剩余长度相等时，还有可能找到匹配的情况。
2.重置count：你需要在每次外循环开始时重置count = 0，否则count会在匹配失败后保持上一次的值，这将导致逻辑错误。
3.优化逻辑：你在内循环中同时检查了字符相等和不相等的情况，其实可以简化。如果不相等，直接break跳出当前的内循环即可，无需再判断相等的情况。
4.移动signal赋值位置：你应该在确认完全匹配后立即设置signal并跳出所有循环，因为只需要找到第一个匹配项的下标，不需要继续查找。
改版后代码如下：
class Solution {
    public int strStr(String haystack, String needle) {
        int signal = -1;
        int count = 0;
        if(needle.length()>haystack.length()){
            return signal;
        }
        if(needle.length() == 1 && haystack.length() == 1){
            if(needle.equals(haystack)){
                return 0;
            }else{
                return signal;
            }
        }
        for(int j = 0;j<=haystack.length()-needle.length();j++){//此处循环要取等号
            count = 0;//每次外循环开始时重置0
            if(needle.charAt(0) != haystack.charAt(j)){
                continue;
            }else{
                for(int i = 0;i<needle.length();i++){
                    if(needle.charAt(i)!=haystack.charAt(j+i)){
                        break;
                    }else if(needle.charAt(i)==haystack.charAt(j+i)){//此时两个字符串的其中一位字符能对上
                        count++;
                    }
                }
                }
                if(count == needle.length()){
                    signal = j;
                    break;//确认完全匹配后立即设置signal并跳出所有循环，因为只需要找到第一个匹配项的下标。不需要继续查找
                }
                //if (signal != -1){
                //    break;
               // }
            }
            return signal;
            }
    }
//need.charat0 == h.charatj
//need.charat1 == h.charatj+1
//...
//need.charatlength-1 == h.charatj+need.length-1
//上述过程才称为匹配成功
优化后代码如下：
class Solution {
    public int strStr(String haystack, String needle) {
        if (needle.length() == 0) {
            return 0; // 如果needle是空字符串，应该返回0
        }
        if (needle.length() > haystack.length()) {
            return -1;
        }
        for (int j = 0; j <= haystack.length() - needle.length(); j++) {
            int count = 0; // 重置count
            for (int i = 0; i < needle.length(); i++) {
                if (needle.charAt(i) == haystack.charAt(j + i)) {
                    count++;
                } else {
                    break; // 不匹配，直接break
                }
                if (count == needle.length()) { // 完全匹配
                    return j; // 返回当前的起始位置
                }
            }
        }
        return -1; // 如果没有找到，返回-1
    }
}


No.242 有效的字母异位词
原题：给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。
注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。
     //思路一：合并后进行异或运算，某些情况存在逻辑漏洞，
     //思路二：合并后对字符进行计数统计，出现出现次数为奇数的就不是，但是针对aa,bb这两个也存在逻辑漏洞
     //思路三：暴力解答,容易超时
     //思路四：因为只有小写英语字母，创建两个26位数组，分别对两个字符串进行统计，如果最后两个数组相同，则符合要求
     //思路五：如果两个字符串长度不等，则肯定false，因此对两个字符串进行排序，如果两个字符串最终相等，则为true
实现思路一：暴力解法，时间复杂度高达O（n^2)，容易超时
代码如下：class Solution {
    public boolean isAnagram(String s, String t) {
     int count1 = 0;
     int count2=0;
     //隐含条件是两个字符串的长度相同
     if(s.length()!=t.length()){
         return false;
     }
     for(int i = 0;i<s.length();i++){
         for(int j = 0;j<s.length();j++){
            if(s.charAt(i) == s.charAt(j)){
                count1++;
            }
            if(s.charAt(i)==t.charAt(j)){
                count2++;
            }
         }
         if(count1 != count2){
             return false;
         }else{
             continue;
         }
     }
     return true;
    }
}
 
实现思路二：因为只有小写英语字母，创建两个26位数组，分别对两个字符串进行统计，如果最后两个数组相同，则符合要求，对两个数组判断相等与否采用Arrays.equals方法
代码如下：
class Solution {
    public boolean isAnagram(String s, String t) {
    int[] arrays1 = new int[26];
    int[] arrayt2 = new int[26];
    if(s.length()!=t.length()){
        return false;
    }
    for(int i = 0;i<s.length();i++){
        arrays1[s.charAt(i) - 97] = arrays1[s.charAt(i) - 97] + 1;
        arrayt2[t.charAt(i) - 97] = arrayt2[t.charAt(i) - 97] + 1;
    }
    if (Arrays.equals(arrays1,arrayt2)){
        return true;
    }else{
        return false;
    }
    }
}
实现思路二是采用的两个计数器，思路虽然清晰，但是还有优化的可能，以下是采用一个计数器的常规标准解法：
实现思路三：class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        
        int[] count = new int[26]; // 假设字符串只包含小写英文字母
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++; // 统计s中每个字符出现次数
            count[t.charAt(i) - 'a']--; // 对应减少t中字符次数
        }
        
        // 检查是否所有计数都归零
        for (int c : count) {
            if (c != 0) {
                return false; // 如果有非0元素，说明s和t不是字母异位词
            }
        }
        
        return true;
    }
}

Approach
Create two ArrayLists to collect the student’s and sandwich numbers.
While the student’s ArrayList is not empty:
If the first element of the student’s ArrayList matches the first sandwich number, remove both elements.
Otherwise, move the first student’s element to the end of the ArrayList.
If both ArrayLists are empty, return 0.
To handle cases where the student’s ArrayList keeps cycling without matching the sandwich, use a count variable. Reset the count whenever a match occurs. If the count exceeds the size of the student’s ArrayList, return the ArrayList size.
Complexity
Time complexity: O(n^2)
Due to ArrayList’s removal operation, which involves searching for the target object and shifting elements.
Code
class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        ArrayList<Integer> studentList = new ArrayList<Integer>();
        ArrayList<Integer> sandwichList = new ArrayList<>();
        for (int i =0;i<students.length;i++){
            sandwichList.add(sandwiches[i]);
            studentList.add(students[i]);
        }
        int count = 0;
        int loopCount = 0;
        while (true) {
            if (Objects.equals(sandwichList.get(count), studentList.get(count))) {
                sandwichList.remove(count);
                studentList.remove(count);
                loopCount = 0;
            } else {
                Integer remove = studentList.remove(count);
                studentList.add(remove);
                loopCount++;
            }
            if (sandwichList.isEmpty()) {
                return 0;
            }
            if (loopCount>studentList.size()){
                return studentList.size();
            }
        }
    }
}
Feel free to ask question! 😊