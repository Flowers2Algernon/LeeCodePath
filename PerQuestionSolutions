No.1768交替合并字符串
第一版解答：暴力解答
class Solution {
    public String mergeAlternately(String word1, String word2) {
        StringBuilder string111 = new StringBuilder();
        if(word1.length() == word2.length()){
            for(int i = 0;i<word1.length();i++){
                string111.append(word1.charAt(i));
                string111.append(word2.charAt(i));
            }
        }else if(word1.length()<word2.length()){
            for(int i = 0;i<word1.length();i++){
                string111.append(word1.charAt(i));
                string111.append(word2.charAt(i));  
            }
            for(int j=word1.length();j<word2.length();j++){
                string111.append(word2.charAt(j));
            }
            return string111.toString();
        }else{
            for(int i = 0;i<word2.length();i++){
                string111.append(word1.charAt(i));
                string111.append(word2.charAt(i));
            }
            for(int j = word2.length();j<word1.length();j++){
                string111.append(word1.charAt(j));
            }
            return string111.toString();
        }
        return string111.toString();
    }
}
思路：构建一个新字符串后，判断两个输入的字符串长度，如果相等，就利用循环遍历添加到新字符串中，使用的是stringBuilder方法。如果长度不相等，则先利用一个循环遍历相等的位数，遍历完成后再截取多余的字符串末尾到新字符串中；
不足：利用最多的时候利用了两个for循环，时间和空间内存占用不是最优解，考虑使用指针进行解答；
更加简洁的解答：
class Solution {
    public String mergeAlternately(String word1, String word2) {
    int w1 = word1.length();
    int w2 = word2.length();
    StringBuilder sr = new StringBuilder();
    for(int i = 0;i<w1||i<w2;i++){
        if(i<w1){
            sr.append(word1.charAt(i));
        }
        if(i<w2){
            sr.append(word2.charAt(i));
        }
    }
    return sr.toString();
    }
}
过程中问题：数组和StringBuilder混淆，append方法是属于String Builder的，不能用在char数组中；
字符串不能直接获取某一位的字符，应该使用charAt(i)方法来获取；
return的值错误返回了一个数组/StringBuilder，应该采用toString()方法来返回字符串；
GPT改错结果：
数组声明错误：你尝试使用new char[w1+w2]来声明一个char数组，但是你之后尝试使用StringBuilder的append方法来给数组添加元素，这是不正确的做法。如果你想要动态添加元素，应该使用StringBuilder而不是数组。
数组访问和StringBuilder方法：你尝试使用括号访问字符串中的字符（例如word1(i)），这是不正确的。正确的方式是使用charAt(i)方法。此外，你尝试对char[]数组使用append方法，这也是不正确的，因为append方法是StringBuilder的方法，不适用于数组。
返回类型不匹配：你想要返回一个字符串，但你的代码尝试返回一个char数组（或者你本意是操作StringBuilder但声明成了数组）。你应该将最终的StringBuilder对象转换为字符串来返回。
语法错误：使用word1.charAt(i)和word2.charAt(i)获取字符而不是word1(i)和word2(i)。

No.389 找不同 
给定两个字符串 s 和 t ，它们只包含小写字母。
字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。
请找出在 t 中被添加的字母。
class Solution {
    public char findTheDifference(String s, String t) {
        //思路1：对s和t中每个出现的字母进行计数，不相同的就是新增的
        //思路2：将s和t按字母顺序排列，然后逐个字符对比，不相同的即是新增的
        //思路3：将两个字符串中的字符Unicode码各种相加，最后两者的差值即是新增的字母
        //思路4：将两个字符串合并，对其中每个字母出现次数相加，结果为奇数的就是新增的字母
       int sums = 0;
       int sumt=0;
        for(int i = 0;i<s.length();i++){
            sums = sums + s.charAt(i);
            sumt = sumt + t.charAt(i);
        }
        sumt = sumt + t.charAt(s.length());
        int addsum = sumt - sums;
        return (char)addsum;
    }
}
总结：较复杂的方法是方法1和方法2，需要利用哈希表；方法3和方法4方法较为巧妙。
ChatGPT改错结果：
1.语法错误：使用char()方法获取字符是不正确的语法。在Java中，应使用charAt()方法来获取字符串中指定位置的字符。
2.逻辑错误：在计算t的字符总和时，你的循环应当遍历整个字符串t，而不是只遍历到s.length()。同时，s.length()+1的计算会越界，应该使用s.length()来索引t中最后一个添加的字符。
注意：
题目中添加一个字母的意思不是说在原来的字符串中没有这个这个字母，而是将原字符串全部打乱后，多加进去一个可能已经存在的字母，所以初版这种碰到原字符串中没有的字母添加会通过，但是一旦是重复字母添加，就会报错。
思路错误代码：
class Solution {
    public char findTheDifference(String s, String t) {
        int j = 0;
        for(int i = 0;i<t.length();i++){//先遍历t,拿出每一个字符来判断是否在s中，不在的话就返回-1；
            if(s.indexOf(t.charAt(i))!= -1){
                continue;
            }else{
                j = i;
                break;
            }
        }
        return t.charAt(j);
    }
}
